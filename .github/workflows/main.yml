name: Latest_Susfs_Kernel_Nord_4

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TZ: Asia/Kolkata
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OPNord4-A15"
  BRANCH: "android14-6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout source code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2. Free up disk space (ensures sufficient disk space)
      - name: Free Disk Space
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
          
      # 3. Install required system packages (combine updates to minimize repetition)
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync ccache cmake libdw-dev zlib1g-dev

      # 4. Configure ccache to speed up recompilations
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G

      # 5. Configure Python environment & install Repo tool
      - name: Setup Python and Repo Tool
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p ~/.bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      # 6. Create and set build directory based on current date/time
      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}_$(TZ=Asia/Kolkata date +'%d-%m-%Y_%I-%M-%p')_RKG"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          mkdir -p "builds/${ROOT_DIR}"
          cd "builds/${ROOT_DIR}"

      # 7. Clone required repositories (using shallow clone for speed)
      - name: Clone Required Repositories
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          repos=(
            "https://github.com/Kernel-SU/AnyKernel3 --depth=1"
            "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 --depth=1"
            "https://github.com/WildPlusKernel/kernel_patches.git --depth=1"
          )
          for repo in "${repos[@]}"; do
            echo "Cloning ${repo}"
            git clone $repo || { echo "Failed to clone $repo"; exit 1; }
          done

      # 8. Initialize and sync the kernel source via Repo tool
      - name: Setup Kernel Source
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          mkdir -p kernel_platform/oneplusNord4_v
          cd kernel_platform/oneplusNord4_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm7675 -m oneplus_nord_4_v.xml --depth=1 || { echo "Failed to initialize repo"; exit 1; }
          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags || { echo "Failed to sync repo"; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      # 9. Add missing kernel modules to module_outs
      - name: Update Kernel BUILD.bazel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplusNord4_v/kernel_platform/common
        run: |
          sed -i '/module_outs = \[/a\
              "net/ipv4/tcp_bic.ko",\
              "net/ipv4/tcp_westwood.ko",' BUILD.bazel

      # 10. Build the kernel using Bazel
      - name: Build Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplusNord4_v
        run: |
          cd kernel_platform
          export LTO=full
          mkdir -p out
          export PATH="/usr/lib/ccache:$PATH"
          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --sandbox_debug \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            -o "$(pwd)/out" || { echo "Bazel build failed"; exit 1; }

      # 11. Create the zip package containing the built kernel image
      - name: Create ZIP Package
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          if [ ! -f kernel_platform/oneplusNord4_v/kernel_platform/out/dist/Image ]; then
            echo "❌ Kernel image not found"
            exit 1
          fi
          cp kernel_platform/oneplusNord4_v/kernel_platform/out/dist/Image AnyKernel3/Image || { echo "❌ Failed to copy kernel image"; exit 1; }

      # 12. Upload the generated zip file as an artifact
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Susfs-Kernel_${{ env.KSUVER }}_${{ env.ROOT_DIR }}
          path: builds/${{ env.ROOT_DIR }}/AnyKernel3